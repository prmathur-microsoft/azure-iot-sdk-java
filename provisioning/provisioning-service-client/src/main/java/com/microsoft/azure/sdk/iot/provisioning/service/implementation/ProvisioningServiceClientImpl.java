/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.azure.sdk.iot.provisioning.service.implementation;

import com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient;
import com.microsoft.rest.ServiceClient;
import com.microsoft.rest.RestClient;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.sdk.iot.provisioning.service.models.AttestationMechanism;
import com.microsoft.azure.sdk.iot.provisioning.service.models.BulkEnrollmentOperation;
import com.microsoft.azure.sdk.iot.provisioning.service.models.BulkEnrollmentOperationResult;
import com.microsoft.azure.sdk.iot.provisioning.service.models.DeviceRegistrationState;
import com.microsoft.azure.sdk.iot.provisioning.service.models.EnrollmentGroup;
import com.microsoft.azure.sdk.iot.provisioning.service.models.IndividualEnrollment;
import com.microsoft.azure.sdk.iot.provisioning.service.models.ProvisioningServiceErrorDetailsException;
import com.microsoft.azure.sdk.iot.provisioning.service.models.QueryEnrollmentGroupsHeaders;
import com.microsoft.azure.sdk.iot.provisioning.service.models.QueryIndividualEnrollmentsHeaders;
import com.microsoft.azure.sdk.iot.provisioning.service.models.QuerySpecification;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseWithHeaders;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * Initializes a new instance of the ProvisioningServiceClient class.
 */
public class ProvisioningServiceClientImpl extends ServiceClient implements ProvisioningServiceClient {
    /**
     * The Retrofit service to perform REST calls.
     */
    private ProvisioningServiceClientService service;

    /** The API version to use for the request. Supported versions include: 2018-09-01-preview. */
    private String apiVersion;

    /**
     * Gets The API version to use for the request. Supported versions include: 2018-09-01-preview.
     *
     * @return the apiVersion value.
     */
    public String apiVersion() {
        return this.apiVersion;
    }

    /**
     * Sets The API version to use for the request. Supported versions include: 2018-09-01-preview.
     *
     * @param apiVersion the apiVersion value.
     * @return the service client itself
     */
    public ProvisioningServiceClientImpl withApiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }

    /**
     * Initializes an instance of ProvisioningServiceClient client.
     */
    public ProvisioningServiceClientImpl() {
        this("https://localhost");
    }

    /**
     * Initializes an instance of ProvisioningServiceClient client.
     *
     * @param baseUrl the base URL of the host
     */
    public ProvisioningServiceClientImpl(String baseUrl) {
        super(baseUrl);
        initialize();
    }

    /**
     * Initializes an instance of ProvisioningServiceClient client.
     *
     * @param clientBuilder the builder for building an OkHttp client, bundled with user configurations
     * @param restBuilder the builder for building an Retrofit client, bundled with user configurations
     */
    public ProvisioningServiceClientImpl(OkHttpClient.Builder clientBuilder, Retrofit.Builder restBuilder) {
        this("https://localhost", clientBuilder, restBuilder);
        initialize();
    }

    /**
     * Initializes an instance of ProvisioningServiceClient client.
     *
     * @param baseUrl the base URL of the host
     * @param clientBuilder the builder for building an OkHttp client, bundled with user configurations
     * @param restBuilder the builder for building an Retrofit client, bundled with user configurations
     */
    public ProvisioningServiceClientImpl(String baseUrl, OkHttpClient.Builder clientBuilder, Retrofit.Builder restBuilder) {
        super(baseUrl, clientBuilder, restBuilder);
        initialize();
    }

    /**
     * Initializes an instance of ProvisioningServiceClient client.
     *
     * @param restClient the REST client containing pre-configured settings
     */
    public ProvisioningServiceClientImpl(RestClient restClient) {
        super(restClient);
        initialize();
    }

    private void initialize() {
        this.apiVersion = "2018-09-01-preview";
        initializeService();
    }

    private void initializeService() {
        service = retrofit().create(ProvisioningServiceClientService.class);
    }

    /**
     * The interface defining all the services for ProvisioningServiceClient to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ProvisioningServiceClientService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient getIndividualEnrollment" })
        @GET("enrollments/{id}")
        Observable<Response<ResponseBody>> getIndividualEnrollment(@Path("id") String id, @Query("api-version") String apiVersion);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient createOrUpdateIndividualEnrollment" })
        @PUT("enrollments/{id}")
        Observable<Response<ResponseBody>> createOrUpdateIndividualEnrollment(@Path("id") String id, @Body IndividualEnrollment enrollment, @Header("If-Match") String ifMatch, @Query("api-version") String apiVersion);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient deleteIndividualEnrollment" })
        @HTTP(path = "enrollments/{id}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteIndividualEnrollment(@Path("id") String id, @Header("If-Match") String ifMatch, @Query("api-version") String apiVersion);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient getEnrollmentGroup" })
        @GET("enrollmentGroups/{id}")
        Observable<Response<ResponseBody>> getEnrollmentGroup(@Path("id") String id, @Query("api-version") String apiVersion);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient createOrUpdateEnrollmentGroup" })
        @PUT("enrollmentGroups/{id}")
        Observable<Response<ResponseBody>> createOrUpdateEnrollmentGroup(@Path("id") String id, @Body EnrollmentGroup enrollmentGroup, @Header("If-Match") String ifMatch, @Query("api-version") String apiVersion);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient deleteEnrollmentGroup" })
        @HTTP(path = "enrollmentGroups/{id}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteEnrollmentGroup(@Path("id") String id, @Header("If-Match") String ifMatch, @Query("api-version") String apiVersion);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient getDeviceRegistrationState" })
        @GET("registrations/{id}")
        Observable<Response<ResponseBody>> getDeviceRegistrationState(@Path("id") String id, @Query("api-version") String apiVersion);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient deleteDeviceRegistrationState" })
        @HTTP(path = "registrations/{id}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteDeviceRegistrationState(@Path("id") String id, @Header("If-Match") String ifMatch, @Query("api-version") String apiVersion);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient runBulkEnrollmentOperation" })
        @POST("enrollments")
        Observable<Response<ResponseBody>> runBulkEnrollmentOperation(@Body BulkEnrollmentOperation bulkOperation, @Query("api-version") String apiVersion);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient queryIndividualEnrollments" })
        @POST("enrollments/query")
        Observable<Response<ResponseBody>> queryIndividualEnrollments(@Header("x-ms-max-item-count") Integer xMsMaxItemCount, @Header("x-ms-continuation") String xMsContinuation, @Body QuerySpecification querySpecification, @Query("api-version") String apiVersion);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient getIndividualEnrollmentAttestationMechanism" })
        @POST("enrollments/{id}/attestationmechanism")
        Observable<Response<ResponseBody>> getIndividualEnrollmentAttestationMechanism(@Path("id") String id, @Query("api-version") String apiVersion);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient queryEnrollmentGroups" })
        @POST("enrollmentGroups/query")
        Observable<Response<ResponseBody>> queryEnrollmentGroups(@Header("x-ms-max-item-count") Integer xMsMaxItemCount, @Header("x-ms-continuation") String xMsContinuation, @Body QuerySpecification querySpecification, @Query("api-version") String apiVersion);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient getEnrollmentGroupAttestationMechanism" })
        @POST("enrollmentGroups/{id}/attestationmechanism")
        Observable<Response<ResponseBody>> getEnrollmentGroupAttestationMechanism(@Path("id") String id, @Query("api-version") String apiVersion);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient queryDeviceRegistrationStates" })
        @POST("registrations/{id}/query")
        Observable<Response<ResponseBody>> queryDeviceRegistrationStates(@Path("id") String id, @Query("api-version") String apiVersion);

    }

    /**
     * Get a device enrollment record.
     *
     * @param id Registration ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IndividualEnrollment object if successful.
     */
    public IndividualEnrollment getIndividualEnrollment(String id) {
        return getIndividualEnrollmentWithServiceResponseAsync(id).toBlocking().single().body();
    }

    /**
     * Get a device enrollment record.
     *
     * @param id Registration ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<IndividualEnrollment> getIndividualEnrollmentAsync(String id, final ServiceCallback<IndividualEnrollment> serviceCallback) {
        return ServiceFuture.fromResponse(getIndividualEnrollmentWithServiceResponseAsync(id), serviceCallback);
    }

    /**
     * Get a device enrollment record.
     *
     * @param id Registration ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndividualEnrollment object
     */
    public Observable<IndividualEnrollment> getIndividualEnrollmentAsync(String id) {
        return getIndividualEnrollmentWithServiceResponseAsync(id).map(new Func1<ServiceResponse<IndividualEnrollment>, IndividualEnrollment>() {
            @Override
            public IndividualEnrollment call(ServiceResponse<IndividualEnrollment> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a device enrollment record.
     *
     * @param id Registration ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndividualEnrollment object
     */
    public Observable<ServiceResponse<IndividualEnrollment>> getIndividualEnrollmentWithServiceResponseAsync(String id) {
        if (id == null) {
            throw new IllegalArgumentException("Parameter id is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.getIndividualEnrollment(id, this.apiVersion())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<IndividualEnrollment>>>() {
                @Override
                public Observable<ServiceResponse<IndividualEnrollment>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<IndividualEnrollment> clientResponse = getIndividualEnrollmentDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<IndividualEnrollment> getIndividualEnrollmentDelegate(Response<ResponseBody> response) throws ProvisioningServiceErrorDetailsException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<IndividualEnrollment, ProvisioningServiceErrorDetailsException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<IndividualEnrollment>() { }.getType())
                .registerError(ProvisioningServiceErrorDetailsException.class)
                .build(response);
    }

    /**
     * Create or update a device enrollment record.
     *
     * @param id The registration ID is alphanumeric, lowercase, and may contain hyphens.
     * @param enrollment The device enrollment record.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IndividualEnrollment object if successful.
     */
    public IndividualEnrollment createOrUpdateIndividualEnrollment(String id, IndividualEnrollment enrollment) {
        return createOrUpdateIndividualEnrollmentWithServiceResponseAsync(id, enrollment).toBlocking().single().body();
    }

    /**
     * Create or update a device enrollment record.
     *
     * @param id The registration ID is alphanumeric, lowercase, and may contain hyphens.
     * @param enrollment The device enrollment record.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<IndividualEnrollment> createOrUpdateIndividualEnrollmentAsync(String id, IndividualEnrollment enrollment, final ServiceCallback<IndividualEnrollment> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateIndividualEnrollmentWithServiceResponseAsync(id, enrollment), serviceCallback);
    }

    /**
     * Create or update a device enrollment record.
     *
     * @param id The registration ID is alphanumeric, lowercase, and may contain hyphens.
     * @param enrollment The device enrollment record.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndividualEnrollment object
     */
    public Observable<IndividualEnrollment> createOrUpdateIndividualEnrollmentAsync(String id, IndividualEnrollment enrollment) {
        return createOrUpdateIndividualEnrollmentWithServiceResponseAsync(id, enrollment).map(new Func1<ServiceResponse<IndividualEnrollment>, IndividualEnrollment>() {
            @Override
            public IndividualEnrollment call(ServiceResponse<IndividualEnrollment> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update a device enrollment record.
     *
     * @param id The registration ID is alphanumeric, lowercase, and may contain hyphens.
     * @param enrollment The device enrollment record.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndividualEnrollment object
     */
    public Observable<ServiceResponse<IndividualEnrollment>> createOrUpdateIndividualEnrollmentWithServiceResponseAsync(String id, IndividualEnrollment enrollment) {
        if (id == null) {
            throw new IllegalArgumentException("Parameter id is required and cannot be null.");
        }
        if (enrollment == null) {
            throw new IllegalArgumentException("Parameter enrollment is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        Validator.validate(enrollment);
        final String ifMatch = null;
        return service.createOrUpdateIndividualEnrollment(id, enrollment, ifMatch, this.apiVersion())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<IndividualEnrollment>>>() {
                @Override
                public Observable<ServiceResponse<IndividualEnrollment>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<IndividualEnrollment> clientResponse = createOrUpdateIndividualEnrollmentDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Create or update a device enrollment record.
     *
     * @param id The registration ID is alphanumeric, lowercase, and may contain hyphens.
     * @param enrollment The device enrollment record.
     * @param ifMatch The ETag of the enrollment record.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IndividualEnrollment object if successful.
     */
    public IndividualEnrollment createOrUpdateIndividualEnrollment(String id, IndividualEnrollment enrollment, String ifMatch) {
        return createOrUpdateIndividualEnrollmentWithServiceResponseAsync(id, enrollment, ifMatch).toBlocking().single().body();
    }

    /**
     * Create or update a device enrollment record.
     *
     * @param id The registration ID is alphanumeric, lowercase, and may contain hyphens.
     * @param enrollment The device enrollment record.
     * @param ifMatch The ETag of the enrollment record.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<IndividualEnrollment> createOrUpdateIndividualEnrollmentAsync(String id, IndividualEnrollment enrollment, String ifMatch, final ServiceCallback<IndividualEnrollment> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateIndividualEnrollmentWithServiceResponseAsync(id, enrollment, ifMatch), serviceCallback);
    }

    /**
     * Create or update a device enrollment record.
     *
     * @param id The registration ID is alphanumeric, lowercase, and may contain hyphens.
     * @param enrollment The device enrollment record.
     * @param ifMatch The ETag of the enrollment record.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndividualEnrollment object
     */
    public Observable<IndividualEnrollment> createOrUpdateIndividualEnrollmentAsync(String id, IndividualEnrollment enrollment, String ifMatch) {
        return createOrUpdateIndividualEnrollmentWithServiceResponseAsync(id, enrollment, ifMatch).map(new Func1<ServiceResponse<IndividualEnrollment>, IndividualEnrollment>() {
            @Override
            public IndividualEnrollment call(ServiceResponse<IndividualEnrollment> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update a device enrollment record.
     *
     * @param id The registration ID is alphanumeric, lowercase, and may contain hyphens.
     * @param enrollment The device enrollment record.
     * @param ifMatch The ETag of the enrollment record.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndividualEnrollment object
     */
    public Observable<ServiceResponse<IndividualEnrollment>> createOrUpdateIndividualEnrollmentWithServiceResponseAsync(String id, IndividualEnrollment enrollment, String ifMatch) {
        if (id == null) {
            throw new IllegalArgumentException("Parameter id is required and cannot be null.");
        }
        if (enrollment == null) {
            throw new IllegalArgumentException("Parameter enrollment is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        Validator.validate(enrollment);
        return service.createOrUpdateIndividualEnrollment(id, enrollment, ifMatch, this.apiVersion())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<IndividualEnrollment>>>() {
                @Override
                public Observable<ServiceResponse<IndividualEnrollment>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<IndividualEnrollment> clientResponse = createOrUpdateIndividualEnrollmentDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<IndividualEnrollment> createOrUpdateIndividualEnrollmentDelegate(Response<ResponseBody> response) throws ProvisioningServiceErrorDetailsException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<IndividualEnrollment, ProvisioningServiceErrorDetailsException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<IndividualEnrollment>() { }.getType())
                .registerError(ProvisioningServiceErrorDetailsException.class)
                .build(response);
    }

    /**
     * Delete a device enrollment record.
     *
     * @param id Registration ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void deleteIndividualEnrollment(String id) {
        deleteIndividualEnrollmentWithServiceResponseAsync(id).toBlocking().single().body();
    }

    /**
     * Delete a device enrollment record.
     *
     * @param id Registration ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteIndividualEnrollmentAsync(String id, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteIndividualEnrollmentWithServiceResponseAsync(id), serviceCallback);
    }

    /**
     * Delete a device enrollment record.
     *
     * @param id Registration ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteIndividualEnrollmentAsync(String id) {
        return deleteIndividualEnrollmentWithServiceResponseAsync(id).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a device enrollment record.
     *
     * @param id Registration ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteIndividualEnrollmentWithServiceResponseAsync(String id) {
        if (id == null) {
            throw new IllegalArgumentException("Parameter id is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        final String ifMatch = null;
        return service.deleteIndividualEnrollment(id, ifMatch, this.apiVersion())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteIndividualEnrollmentDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Delete a device enrollment record.
     *
     * @param id Registration ID.
     * @param ifMatch The ETag of the enrollment record.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void deleteIndividualEnrollment(String id, String ifMatch) {
        deleteIndividualEnrollmentWithServiceResponseAsync(id, ifMatch).toBlocking().single().body();
    }

    /**
     * Delete a device enrollment record.
     *
     * @param id Registration ID.
     * @param ifMatch The ETag of the enrollment record.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteIndividualEnrollmentAsync(String id, String ifMatch, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteIndividualEnrollmentWithServiceResponseAsync(id, ifMatch), serviceCallback);
    }

    /**
     * Delete a device enrollment record.
     *
     * @param id Registration ID.
     * @param ifMatch The ETag of the enrollment record.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteIndividualEnrollmentAsync(String id, String ifMatch) {
        return deleteIndividualEnrollmentWithServiceResponseAsync(id, ifMatch).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a device enrollment record.
     *
     * @param id Registration ID.
     * @param ifMatch The ETag of the enrollment record.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteIndividualEnrollmentWithServiceResponseAsync(String id, String ifMatch) {
        if (id == null) {
            throw new IllegalArgumentException("Parameter id is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.deleteIndividualEnrollment(id, ifMatch, this.apiVersion())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteIndividualEnrollmentDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteIndividualEnrollmentDelegate(Response<ResponseBody> response) throws ProvisioningServiceErrorDetailsException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<Void, ProvisioningServiceErrorDetailsException>newInstance(this.serializerAdapter())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ProvisioningServiceErrorDetailsException.class)
                .build(response);
    }

    /**
     * Get a device enrollment group.
     *
     * @param id Enrollment group ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EnrollmentGroup object if successful.
     */
    public EnrollmentGroup getEnrollmentGroup(String id) {
        return getEnrollmentGroupWithServiceResponseAsync(id).toBlocking().single().body();
    }

    /**
     * Get a device enrollment group.
     *
     * @param id Enrollment group ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<EnrollmentGroup> getEnrollmentGroupAsync(String id, final ServiceCallback<EnrollmentGroup> serviceCallback) {
        return ServiceFuture.fromResponse(getEnrollmentGroupWithServiceResponseAsync(id), serviceCallback);
    }

    /**
     * Get a device enrollment group.
     *
     * @param id Enrollment group ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EnrollmentGroup object
     */
    public Observable<EnrollmentGroup> getEnrollmentGroupAsync(String id) {
        return getEnrollmentGroupWithServiceResponseAsync(id).map(new Func1<ServiceResponse<EnrollmentGroup>, EnrollmentGroup>() {
            @Override
            public EnrollmentGroup call(ServiceResponse<EnrollmentGroup> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a device enrollment group.
     *
     * @param id Enrollment group ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EnrollmentGroup object
     */
    public Observable<ServiceResponse<EnrollmentGroup>> getEnrollmentGroupWithServiceResponseAsync(String id) {
        if (id == null) {
            throw new IllegalArgumentException("Parameter id is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.getEnrollmentGroup(id, this.apiVersion())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<EnrollmentGroup>>>() {
                @Override
                public Observable<ServiceResponse<EnrollmentGroup>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<EnrollmentGroup> clientResponse = getEnrollmentGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<EnrollmentGroup> getEnrollmentGroupDelegate(Response<ResponseBody> response) throws ProvisioningServiceErrorDetailsException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<EnrollmentGroup, ProvisioningServiceErrorDetailsException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<EnrollmentGroup>() { }.getType())
                .registerError(ProvisioningServiceErrorDetailsException.class)
                .build(response);
    }

    /**
     * Create or update a device enrollment group.
     *
     * @param id Enrollment group ID.
     * @param enrollmentGroup The device enrollment group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EnrollmentGroup object if successful.
     */
    public EnrollmentGroup createOrUpdateEnrollmentGroup(String id, EnrollmentGroup enrollmentGroup) {
        return createOrUpdateEnrollmentGroupWithServiceResponseAsync(id, enrollmentGroup).toBlocking().single().body();
    }

    /**
     * Create or update a device enrollment group.
     *
     * @param id Enrollment group ID.
     * @param enrollmentGroup The device enrollment group.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<EnrollmentGroup> createOrUpdateEnrollmentGroupAsync(String id, EnrollmentGroup enrollmentGroup, final ServiceCallback<EnrollmentGroup> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateEnrollmentGroupWithServiceResponseAsync(id, enrollmentGroup), serviceCallback);
    }

    /**
     * Create or update a device enrollment group.
     *
     * @param id Enrollment group ID.
     * @param enrollmentGroup The device enrollment group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EnrollmentGroup object
     */
    public Observable<EnrollmentGroup> createOrUpdateEnrollmentGroupAsync(String id, EnrollmentGroup enrollmentGroup) {
        return createOrUpdateEnrollmentGroupWithServiceResponseAsync(id, enrollmentGroup).map(new Func1<ServiceResponse<EnrollmentGroup>, EnrollmentGroup>() {
            @Override
            public EnrollmentGroup call(ServiceResponse<EnrollmentGroup> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update a device enrollment group.
     *
     * @param id Enrollment group ID.
     * @param enrollmentGroup The device enrollment group.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EnrollmentGroup object
     */
    public Observable<ServiceResponse<EnrollmentGroup>> createOrUpdateEnrollmentGroupWithServiceResponseAsync(String id, EnrollmentGroup enrollmentGroup) {
        if (id == null) {
            throw new IllegalArgumentException("Parameter id is required and cannot be null.");
        }
        if (enrollmentGroup == null) {
            throw new IllegalArgumentException("Parameter enrollmentGroup is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        Validator.validate(enrollmentGroup);
        final String ifMatch = null;
        return service.createOrUpdateEnrollmentGroup(id, enrollmentGroup, ifMatch, this.apiVersion())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<EnrollmentGroup>>>() {
                @Override
                public Observable<ServiceResponse<EnrollmentGroup>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<EnrollmentGroup> clientResponse = createOrUpdateEnrollmentGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Create or update a device enrollment group.
     *
     * @param id Enrollment group ID.
     * @param enrollmentGroup The device enrollment group.
     * @param ifMatch The ETag of the enrollment record.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EnrollmentGroup object if successful.
     */
    public EnrollmentGroup createOrUpdateEnrollmentGroup(String id, EnrollmentGroup enrollmentGroup, String ifMatch) {
        return createOrUpdateEnrollmentGroupWithServiceResponseAsync(id, enrollmentGroup, ifMatch).toBlocking().single().body();
    }

    /**
     * Create or update a device enrollment group.
     *
     * @param id Enrollment group ID.
     * @param enrollmentGroup The device enrollment group.
     * @param ifMatch The ETag of the enrollment record.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<EnrollmentGroup> createOrUpdateEnrollmentGroupAsync(String id, EnrollmentGroup enrollmentGroup, String ifMatch, final ServiceCallback<EnrollmentGroup> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateEnrollmentGroupWithServiceResponseAsync(id, enrollmentGroup, ifMatch), serviceCallback);
    }

    /**
     * Create or update a device enrollment group.
     *
     * @param id Enrollment group ID.
     * @param enrollmentGroup The device enrollment group.
     * @param ifMatch The ETag of the enrollment record.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EnrollmentGroup object
     */
    public Observable<EnrollmentGroup> createOrUpdateEnrollmentGroupAsync(String id, EnrollmentGroup enrollmentGroup, String ifMatch) {
        return createOrUpdateEnrollmentGroupWithServiceResponseAsync(id, enrollmentGroup, ifMatch).map(new Func1<ServiceResponse<EnrollmentGroup>, EnrollmentGroup>() {
            @Override
            public EnrollmentGroup call(ServiceResponse<EnrollmentGroup> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update a device enrollment group.
     *
     * @param id Enrollment group ID.
     * @param enrollmentGroup The device enrollment group.
     * @param ifMatch The ETag of the enrollment record.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EnrollmentGroup object
     */
    public Observable<ServiceResponse<EnrollmentGroup>> createOrUpdateEnrollmentGroupWithServiceResponseAsync(String id, EnrollmentGroup enrollmentGroup, String ifMatch) {
        if (id == null) {
            throw new IllegalArgumentException("Parameter id is required and cannot be null.");
        }
        if (enrollmentGroup == null) {
            throw new IllegalArgumentException("Parameter enrollmentGroup is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        Validator.validate(enrollmentGroup);
        return service.createOrUpdateEnrollmentGroup(id, enrollmentGroup, ifMatch, this.apiVersion())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<EnrollmentGroup>>>() {
                @Override
                public Observable<ServiceResponse<EnrollmentGroup>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<EnrollmentGroup> clientResponse = createOrUpdateEnrollmentGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<EnrollmentGroup> createOrUpdateEnrollmentGroupDelegate(Response<ResponseBody> response) throws ProvisioningServiceErrorDetailsException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<EnrollmentGroup, ProvisioningServiceErrorDetailsException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<EnrollmentGroup>() { }.getType())
                .registerError(ProvisioningServiceErrorDetailsException.class)
                .build(response);
    }

    /**
     * Delete a device enrollment group.
     *
     * @param id Enrollment group ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void deleteEnrollmentGroup(String id) {
        deleteEnrollmentGroupWithServiceResponseAsync(id).toBlocking().single().body();
    }

    /**
     * Delete a device enrollment group.
     *
     * @param id Enrollment group ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteEnrollmentGroupAsync(String id, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteEnrollmentGroupWithServiceResponseAsync(id), serviceCallback);
    }

    /**
     * Delete a device enrollment group.
     *
     * @param id Enrollment group ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteEnrollmentGroupAsync(String id) {
        return deleteEnrollmentGroupWithServiceResponseAsync(id).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a device enrollment group.
     *
     * @param id Enrollment group ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteEnrollmentGroupWithServiceResponseAsync(String id) {
        if (id == null) {
            throw new IllegalArgumentException("Parameter id is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        final String ifMatch = null;
        return service.deleteEnrollmentGroup(id, ifMatch, this.apiVersion())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteEnrollmentGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Delete a device enrollment group.
     *
     * @param id Enrollment group ID.
     * @param ifMatch The ETag of the enrollment group record.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void deleteEnrollmentGroup(String id, String ifMatch) {
        deleteEnrollmentGroupWithServiceResponseAsync(id, ifMatch).toBlocking().single().body();
    }

    /**
     * Delete a device enrollment group.
     *
     * @param id Enrollment group ID.
     * @param ifMatch The ETag of the enrollment group record.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteEnrollmentGroupAsync(String id, String ifMatch, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteEnrollmentGroupWithServiceResponseAsync(id, ifMatch), serviceCallback);
    }

    /**
     * Delete a device enrollment group.
     *
     * @param id Enrollment group ID.
     * @param ifMatch The ETag of the enrollment group record.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteEnrollmentGroupAsync(String id, String ifMatch) {
        return deleteEnrollmentGroupWithServiceResponseAsync(id, ifMatch).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a device enrollment group.
     *
     * @param id Enrollment group ID.
     * @param ifMatch The ETag of the enrollment group record.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteEnrollmentGroupWithServiceResponseAsync(String id, String ifMatch) {
        if (id == null) {
            throw new IllegalArgumentException("Parameter id is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.deleteEnrollmentGroup(id, ifMatch, this.apiVersion())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteEnrollmentGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteEnrollmentGroupDelegate(Response<ResponseBody> response) throws ProvisioningServiceErrorDetailsException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<Void, ProvisioningServiceErrorDetailsException>newInstance(this.serializerAdapter())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ProvisioningServiceErrorDetailsException.class)
                .build(response);
    }

    /**
     * Gets the device registration state.
     *
     * @param id Registration ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DeviceRegistrationState object if successful.
     */
    public DeviceRegistrationState getDeviceRegistrationState(String id) {
        return getDeviceRegistrationStateWithServiceResponseAsync(id).toBlocking().single().body();
    }

    /**
     * Gets the device registration state.
     *
     * @param id Registration ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DeviceRegistrationState> getDeviceRegistrationStateAsync(String id, final ServiceCallback<DeviceRegistrationState> serviceCallback) {
        return ServiceFuture.fromResponse(getDeviceRegistrationStateWithServiceResponseAsync(id), serviceCallback);
    }

    /**
     * Gets the device registration state.
     *
     * @param id Registration ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DeviceRegistrationState object
     */
    public Observable<DeviceRegistrationState> getDeviceRegistrationStateAsync(String id) {
        return getDeviceRegistrationStateWithServiceResponseAsync(id).map(new Func1<ServiceResponse<DeviceRegistrationState>, DeviceRegistrationState>() {
            @Override
            public DeviceRegistrationState call(ServiceResponse<DeviceRegistrationState> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the device registration state.
     *
     * @param id Registration ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DeviceRegistrationState object
     */
    public Observable<ServiceResponse<DeviceRegistrationState>> getDeviceRegistrationStateWithServiceResponseAsync(String id) {
        if (id == null) {
            throw new IllegalArgumentException("Parameter id is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.getDeviceRegistrationState(id, this.apiVersion())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DeviceRegistrationState>>>() {
                @Override
                public Observable<ServiceResponse<DeviceRegistrationState>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DeviceRegistrationState> clientResponse = getDeviceRegistrationStateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DeviceRegistrationState> getDeviceRegistrationStateDelegate(Response<ResponseBody> response) throws ProvisioningServiceErrorDetailsException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<DeviceRegistrationState, ProvisioningServiceErrorDetailsException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<DeviceRegistrationState>() { }.getType())
                .registerError(ProvisioningServiceErrorDetailsException.class)
                .build(response);
    }

    /**
     * Deletes the device registration.
     *
     * @param id Registration ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void deleteDeviceRegistrationState(String id) {
        deleteDeviceRegistrationStateWithServiceResponseAsync(id).toBlocking().single().body();
    }

    /**
     * Deletes the device registration.
     *
     * @param id Registration ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteDeviceRegistrationStateAsync(String id, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteDeviceRegistrationStateWithServiceResponseAsync(id), serviceCallback);
    }

    /**
     * Deletes the device registration.
     *
     * @param id Registration ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteDeviceRegistrationStateAsync(String id) {
        return deleteDeviceRegistrationStateWithServiceResponseAsync(id).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the device registration.
     *
     * @param id Registration ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteDeviceRegistrationStateWithServiceResponseAsync(String id) {
        if (id == null) {
            throw new IllegalArgumentException("Parameter id is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        final String ifMatch = null;
        return service.deleteDeviceRegistrationState(id, ifMatch, this.apiVersion())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDeviceRegistrationStateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Deletes the device registration.
     *
     * @param id Registration ID.
     * @param ifMatch The ETag of the registration status record.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void deleteDeviceRegistrationState(String id, String ifMatch) {
        deleteDeviceRegistrationStateWithServiceResponseAsync(id, ifMatch).toBlocking().single().body();
    }

    /**
     * Deletes the device registration.
     *
     * @param id Registration ID.
     * @param ifMatch The ETag of the registration status record.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteDeviceRegistrationStateAsync(String id, String ifMatch, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteDeviceRegistrationStateWithServiceResponseAsync(id, ifMatch), serviceCallback);
    }

    /**
     * Deletes the device registration.
     *
     * @param id Registration ID.
     * @param ifMatch The ETag of the registration status record.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteDeviceRegistrationStateAsync(String id, String ifMatch) {
        return deleteDeviceRegistrationStateWithServiceResponseAsync(id, ifMatch).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the device registration.
     *
     * @param id Registration ID.
     * @param ifMatch The ETag of the registration status record.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteDeviceRegistrationStateWithServiceResponseAsync(String id, String ifMatch) {
        if (id == null) {
            throw new IllegalArgumentException("Parameter id is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.deleteDeviceRegistrationState(id, ifMatch, this.apiVersion())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDeviceRegistrationStateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDeviceRegistrationStateDelegate(Response<ResponseBody> response) throws ProvisioningServiceErrorDetailsException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<Void, ProvisioningServiceErrorDetailsException>newInstance(this.serializerAdapter())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ProvisioningServiceErrorDetailsException.class)
                .build(response);
    }

    /**
     * Bulk device enrollment operation.
     *
     * @param bulkOperation Bulk operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BulkEnrollmentOperationResult object if successful.
     */
    public BulkEnrollmentOperationResult runBulkEnrollmentOperation(BulkEnrollmentOperation bulkOperation) {
        return runBulkEnrollmentOperationWithServiceResponseAsync(bulkOperation).toBlocking().single().body();
    }

    /**
     * Bulk device enrollment operation.
     *
     * @param bulkOperation Bulk operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BulkEnrollmentOperationResult> runBulkEnrollmentOperationAsync(BulkEnrollmentOperation bulkOperation, final ServiceCallback<BulkEnrollmentOperationResult> serviceCallback) {
        return ServiceFuture.fromResponse(runBulkEnrollmentOperationWithServiceResponseAsync(bulkOperation), serviceCallback);
    }

    /**
     * Bulk device enrollment operation.
     *
     * @param bulkOperation Bulk operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BulkEnrollmentOperationResult object
     */
    public Observable<BulkEnrollmentOperationResult> runBulkEnrollmentOperationAsync(BulkEnrollmentOperation bulkOperation) {
        return runBulkEnrollmentOperationWithServiceResponseAsync(bulkOperation).map(new Func1<ServiceResponse<BulkEnrollmentOperationResult>, BulkEnrollmentOperationResult>() {
            @Override
            public BulkEnrollmentOperationResult call(ServiceResponse<BulkEnrollmentOperationResult> response) {
                return response.body();
            }
        });
    }

    /**
     * Bulk device enrollment operation.
     *
     * @param bulkOperation Bulk operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BulkEnrollmentOperationResult object
     */
    public Observable<ServiceResponse<BulkEnrollmentOperationResult>> runBulkEnrollmentOperationWithServiceResponseAsync(BulkEnrollmentOperation bulkOperation) {
        if (bulkOperation == null) {
            throw new IllegalArgumentException("Parameter bulkOperation is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        Validator.validate(bulkOperation);
        return service.runBulkEnrollmentOperation(bulkOperation, this.apiVersion())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BulkEnrollmentOperationResult>>>() {
                @Override
                public Observable<ServiceResponse<BulkEnrollmentOperationResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BulkEnrollmentOperationResult> clientResponse = runBulkEnrollmentOperationDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BulkEnrollmentOperationResult> runBulkEnrollmentOperationDelegate(Response<ResponseBody> response) throws ProvisioningServiceErrorDetailsException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<BulkEnrollmentOperationResult, ProvisioningServiceErrorDetailsException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<BulkEnrollmentOperationResult>() { }.getType())
                .registerError(ProvisioningServiceErrorDetailsException.class)
                .build(response);
    }

    /**
     * Query the device enrollment records.
     *
     * @param querySpecification The query specification.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;IndividualEnrollment&gt; object if successful.
     */
    public List<IndividualEnrollment> queryIndividualEnrollments(QuerySpecification querySpecification) {
        return queryIndividualEnrollmentsWithServiceResponseAsync(querySpecification).toBlocking().single().body();
    }

    /**
     * Query the device enrollment records.
     *
     * @param querySpecification The query specification.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<IndividualEnrollment>> queryIndividualEnrollmentsAsync(QuerySpecification querySpecification, final ServiceCallback<List<IndividualEnrollment>> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(queryIndividualEnrollmentsWithServiceResponseAsync(querySpecification), serviceCallback);
    }

    /**
     * Query the device enrollment records.
     *
     * @param querySpecification The query specification.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;IndividualEnrollment&gt; object
     */
    public Observable<List<IndividualEnrollment>> queryIndividualEnrollmentsAsync(QuerySpecification querySpecification) {
        return queryIndividualEnrollmentsWithServiceResponseAsync(querySpecification).map(new Func1<ServiceResponseWithHeaders<List<IndividualEnrollment>, QueryIndividualEnrollmentsHeaders>, List<IndividualEnrollment>>() {
            @Override
            public List<IndividualEnrollment> call(ServiceResponseWithHeaders<List<IndividualEnrollment>, QueryIndividualEnrollmentsHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Query the device enrollment records.
     *
     * @param querySpecification The query specification.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;IndividualEnrollment&gt; object
     */
    public Observable<ServiceResponseWithHeaders<List<IndividualEnrollment>, QueryIndividualEnrollmentsHeaders>> queryIndividualEnrollmentsWithServiceResponseAsync(QuerySpecification querySpecification) {
        if (querySpecification == null) {
            throw new IllegalArgumentException("Parameter querySpecification is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        Validator.validate(querySpecification);
        final Integer xMsMaxItemCount = null;
        final String xMsContinuation = null;
        return service.queryIndividualEnrollments(xMsMaxItemCount, xMsContinuation, querySpecification, this.apiVersion())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<List<IndividualEnrollment>, QueryIndividualEnrollmentsHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<List<IndividualEnrollment>, QueryIndividualEnrollmentsHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<List<IndividualEnrollment>, QueryIndividualEnrollmentsHeaders> clientResponse = queryIndividualEnrollmentsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Query the device enrollment records.
     *
     * @param querySpecification The query specification.
     * @param xMsMaxItemCount pageSize
     * @param xMsContinuation continuation token
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;IndividualEnrollment&gt; object if successful.
     */
    public List<IndividualEnrollment> queryIndividualEnrollments(QuerySpecification querySpecification, Integer xMsMaxItemCount, String xMsContinuation) {
        return queryIndividualEnrollmentsWithServiceResponseAsync(querySpecification, xMsMaxItemCount, xMsContinuation).toBlocking().single().body();
    }

    /**
     * Query the device enrollment records.
     *
     * @param querySpecification The query specification.
     * @param xMsMaxItemCount pageSize
     * @param xMsContinuation continuation token
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<IndividualEnrollment>> queryIndividualEnrollmentsAsync(QuerySpecification querySpecification, Integer xMsMaxItemCount, String xMsContinuation, final ServiceCallback<List<IndividualEnrollment>> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(queryIndividualEnrollmentsWithServiceResponseAsync(querySpecification, xMsMaxItemCount, xMsContinuation), serviceCallback);
    }

    /**
     * Query the device enrollment records.
     *
     * @param querySpecification The query specification.
     * @param xMsMaxItemCount pageSize
     * @param xMsContinuation continuation token
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;IndividualEnrollment&gt; object
     */
    public Observable<List<IndividualEnrollment>> queryIndividualEnrollmentsAsync(QuerySpecification querySpecification, Integer xMsMaxItemCount, String xMsContinuation) {
        return queryIndividualEnrollmentsWithServiceResponseAsync(querySpecification, xMsMaxItemCount, xMsContinuation).map(new Func1<ServiceResponseWithHeaders<List<IndividualEnrollment>, QueryIndividualEnrollmentsHeaders>, List<IndividualEnrollment>>() {
            @Override
            public List<IndividualEnrollment> call(ServiceResponseWithHeaders<List<IndividualEnrollment>, QueryIndividualEnrollmentsHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Query the device enrollment records.
     *
     * @param querySpecification The query specification.
     * @param xMsMaxItemCount pageSize
     * @param xMsContinuation continuation token
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;IndividualEnrollment&gt; object
     */
    public Observable<ServiceResponseWithHeaders<List<IndividualEnrollment>, QueryIndividualEnrollmentsHeaders>> queryIndividualEnrollmentsWithServiceResponseAsync(QuerySpecification querySpecification, Integer xMsMaxItemCount, String xMsContinuation) {
        if (querySpecification == null) {
            throw new IllegalArgumentException("Parameter querySpecification is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        Validator.validate(querySpecification);
        return service.queryIndividualEnrollments(xMsMaxItemCount, xMsContinuation, querySpecification, this.apiVersion())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<List<IndividualEnrollment>, QueryIndividualEnrollmentsHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<List<IndividualEnrollment>, QueryIndividualEnrollmentsHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<List<IndividualEnrollment>, QueryIndividualEnrollmentsHeaders> clientResponse = queryIndividualEnrollmentsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<List<IndividualEnrollment>, QueryIndividualEnrollmentsHeaders> queryIndividualEnrollmentsDelegate(Response<ResponseBody> response) throws ProvisioningServiceErrorDetailsException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<List<IndividualEnrollment>, ProvisioningServiceErrorDetailsException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<List<IndividualEnrollment>>() { }.getType())
                .registerError(ProvisioningServiceErrorDetailsException.class)
                .buildWithHeaders(response, QueryIndividualEnrollmentsHeaders.class);
    }

    /**
     * Get the attestation mechanism in the device enrollment record.
     *
     * @param id Registration ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AttestationMechanism object if successful.
     */
    public AttestationMechanism getIndividualEnrollmentAttestationMechanism(String id) {
        return getIndividualEnrollmentAttestationMechanismWithServiceResponseAsync(id).toBlocking().single().body();
    }

    /**
     * Get the attestation mechanism in the device enrollment record.
     *
     * @param id Registration ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AttestationMechanism> getIndividualEnrollmentAttestationMechanismAsync(String id, final ServiceCallback<AttestationMechanism> serviceCallback) {
        return ServiceFuture.fromResponse(getIndividualEnrollmentAttestationMechanismWithServiceResponseAsync(id), serviceCallback);
    }

    /**
     * Get the attestation mechanism in the device enrollment record.
     *
     * @param id Registration ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AttestationMechanism object
     */
    public Observable<AttestationMechanism> getIndividualEnrollmentAttestationMechanismAsync(String id) {
        return getIndividualEnrollmentAttestationMechanismWithServiceResponseAsync(id).map(new Func1<ServiceResponse<AttestationMechanism>, AttestationMechanism>() {
            @Override
            public AttestationMechanism call(ServiceResponse<AttestationMechanism> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the attestation mechanism in the device enrollment record.
     *
     * @param id Registration ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AttestationMechanism object
     */
    public Observable<ServiceResponse<AttestationMechanism>> getIndividualEnrollmentAttestationMechanismWithServiceResponseAsync(String id) {
        if (id == null) {
            throw new IllegalArgumentException("Parameter id is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.getIndividualEnrollmentAttestationMechanism(id, this.apiVersion())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AttestationMechanism>>>() {
                @Override
                public Observable<ServiceResponse<AttestationMechanism>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AttestationMechanism> clientResponse = getIndividualEnrollmentAttestationMechanismDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AttestationMechanism> getIndividualEnrollmentAttestationMechanismDelegate(Response<ResponseBody> response) throws ProvisioningServiceErrorDetailsException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<AttestationMechanism, ProvisioningServiceErrorDetailsException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<AttestationMechanism>() { }.getType())
                .registerError(ProvisioningServiceErrorDetailsException.class)
                .build(response);
    }

    /**
     * Query the device enrollment groups.
     *
     * @param querySpecification The query specification.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EnrollmentGroup&gt; object if successful.
     */
    public List<EnrollmentGroup> queryEnrollmentGroups(QuerySpecification querySpecification) {
        return queryEnrollmentGroupsWithServiceResponseAsync(querySpecification).toBlocking().single().body();
    }

    /**
     * Query the device enrollment groups.
     *
     * @param querySpecification The query specification.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<EnrollmentGroup>> queryEnrollmentGroupsAsync(QuerySpecification querySpecification, final ServiceCallback<List<EnrollmentGroup>> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(queryEnrollmentGroupsWithServiceResponseAsync(querySpecification), serviceCallback);
    }

    /**
     * Query the device enrollment groups.
     *
     * @param querySpecification The query specification.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EnrollmentGroup&gt; object
     */
    public Observable<List<EnrollmentGroup>> queryEnrollmentGroupsAsync(QuerySpecification querySpecification) {
        return queryEnrollmentGroupsWithServiceResponseAsync(querySpecification).map(new Func1<ServiceResponseWithHeaders<List<EnrollmentGroup>, QueryEnrollmentGroupsHeaders>, List<EnrollmentGroup>>() {
            @Override
            public List<EnrollmentGroup> call(ServiceResponseWithHeaders<List<EnrollmentGroup>, QueryEnrollmentGroupsHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Query the device enrollment groups.
     *
     * @param querySpecification The query specification.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EnrollmentGroup&gt; object
     */
    public Observable<ServiceResponseWithHeaders<List<EnrollmentGroup>, QueryEnrollmentGroupsHeaders>> queryEnrollmentGroupsWithServiceResponseAsync(QuerySpecification querySpecification) {
        if (querySpecification == null) {
            throw new IllegalArgumentException("Parameter querySpecification is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        Validator.validate(querySpecification);
        final Integer xMsMaxItemCount = null;
        final String xMsContinuation = null;
        return service.queryEnrollmentGroups(xMsMaxItemCount, xMsContinuation, querySpecification, this.apiVersion())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<List<EnrollmentGroup>, QueryEnrollmentGroupsHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<List<EnrollmentGroup>, QueryEnrollmentGroupsHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<List<EnrollmentGroup>, QueryEnrollmentGroupsHeaders> clientResponse = queryEnrollmentGroupsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Query the device enrollment groups.
     *
     * @param querySpecification The query specification.
     * @param xMsMaxItemCount pageSize
     * @param xMsContinuation continuation token
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EnrollmentGroup&gt; object if successful.
     */
    public List<EnrollmentGroup> queryEnrollmentGroups(QuerySpecification querySpecification, Integer xMsMaxItemCount, String xMsContinuation) {
        return queryEnrollmentGroupsWithServiceResponseAsync(querySpecification, xMsMaxItemCount, xMsContinuation).toBlocking().single().body();
    }

    /**
     * Query the device enrollment groups.
     *
     * @param querySpecification The query specification.
     * @param xMsMaxItemCount pageSize
     * @param xMsContinuation continuation token
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<EnrollmentGroup>> queryEnrollmentGroupsAsync(QuerySpecification querySpecification, Integer xMsMaxItemCount, String xMsContinuation, final ServiceCallback<List<EnrollmentGroup>> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(queryEnrollmentGroupsWithServiceResponseAsync(querySpecification, xMsMaxItemCount, xMsContinuation), serviceCallback);
    }

    /**
     * Query the device enrollment groups.
     *
     * @param querySpecification The query specification.
     * @param xMsMaxItemCount pageSize
     * @param xMsContinuation continuation token
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EnrollmentGroup&gt; object
     */
    public Observable<List<EnrollmentGroup>> queryEnrollmentGroupsAsync(QuerySpecification querySpecification, Integer xMsMaxItemCount, String xMsContinuation) {
        return queryEnrollmentGroupsWithServiceResponseAsync(querySpecification, xMsMaxItemCount, xMsContinuation).map(new Func1<ServiceResponseWithHeaders<List<EnrollmentGroup>, QueryEnrollmentGroupsHeaders>, List<EnrollmentGroup>>() {
            @Override
            public List<EnrollmentGroup> call(ServiceResponseWithHeaders<List<EnrollmentGroup>, QueryEnrollmentGroupsHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Query the device enrollment groups.
     *
     * @param querySpecification The query specification.
     * @param xMsMaxItemCount pageSize
     * @param xMsContinuation continuation token
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EnrollmentGroup&gt; object
     */
    public Observable<ServiceResponseWithHeaders<List<EnrollmentGroup>, QueryEnrollmentGroupsHeaders>> queryEnrollmentGroupsWithServiceResponseAsync(QuerySpecification querySpecification, Integer xMsMaxItemCount, String xMsContinuation) {
        if (querySpecification == null) {
            throw new IllegalArgumentException("Parameter querySpecification is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        Validator.validate(querySpecification);
        return service.queryEnrollmentGroups(xMsMaxItemCount, xMsContinuation, querySpecification, this.apiVersion())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<List<EnrollmentGroup>, QueryEnrollmentGroupsHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<List<EnrollmentGroup>, QueryEnrollmentGroupsHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<List<EnrollmentGroup>, QueryEnrollmentGroupsHeaders> clientResponse = queryEnrollmentGroupsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<List<EnrollmentGroup>, QueryEnrollmentGroupsHeaders> queryEnrollmentGroupsDelegate(Response<ResponseBody> response) throws ProvisioningServiceErrorDetailsException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<List<EnrollmentGroup>, ProvisioningServiceErrorDetailsException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<List<EnrollmentGroup>>() { }.getType())
                .registerError(ProvisioningServiceErrorDetailsException.class)
                .buildWithHeaders(response, QueryEnrollmentGroupsHeaders.class);
    }

    /**
     * Get the attestation mechanism in the device enrollment group record.
     *
     * @param id Enrollment group ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AttestationMechanism object if successful.
     */
    public AttestationMechanism getEnrollmentGroupAttestationMechanism(String id) {
        return getEnrollmentGroupAttestationMechanismWithServiceResponseAsync(id).toBlocking().single().body();
    }

    /**
     * Get the attestation mechanism in the device enrollment group record.
     *
     * @param id Enrollment group ID
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AttestationMechanism> getEnrollmentGroupAttestationMechanismAsync(String id, final ServiceCallback<AttestationMechanism> serviceCallback) {
        return ServiceFuture.fromResponse(getEnrollmentGroupAttestationMechanismWithServiceResponseAsync(id), serviceCallback);
    }

    /**
     * Get the attestation mechanism in the device enrollment group record.
     *
     * @param id Enrollment group ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AttestationMechanism object
     */
    public Observable<AttestationMechanism> getEnrollmentGroupAttestationMechanismAsync(String id) {
        return getEnrollmentGroupAttestationMechanismWithServiceResponseAsync(id).map(new Func1<ServiceResponse<AttestationMechanism>, AttestationMechanism>() {
            @Override
            public AttestationMechanism call(ServiceResponse<AttestationMechanism> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the attestation mechanism in the device enrollment group record.
     *
     * @param id Enrollment group ID
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AttestationMechanism object
     */
    public Observable<ServiceResponse<AttestationMechanism>> getEnrollmentGroupAttestationMechanismWithServiceResponseAsync(String id) {
        if (id == null) {
            throw new IllegalArgumentException("Parameter id is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.getEnrollmentGroupAttestationMechanism(id, this.apiVersion())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AttestationMechanism>>>() {
                @Override
                public Observable<ServiceResponse<AttestationMechanism>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AttestationMechanism> clientResponse = getEnrollmentGroupAttestationMechanismDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AttestationMechanism> getEnrollmentGroupAttestationMechanismDelegate(Response<ResponseBody> response) throws ProvisioningServiceErrorDetailsException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<AttestationMechanism, ProvisioningServiceErrorDetailsException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<AttestationMechanism>() { }.getType())
                .registerError(ProvisioningServiceErrorDetailsException.class)
                .build(response);
    }

    /**
     * Gets the registration state of devices in this enrollmentGroup.
     *
     * @param id Enrollment group ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ProvisioningServiceErrorDetailsException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;DeviceRegistrationState&gt; object if successful.
     */
    public List<DeviceRegistrationState> queryDeviceRegistrationStates(String id) {
        return queryDeviceRegistrationStatesWithServiceResponseAsync(id).toBlocking().single().body();
    }

    /**
     * Gets the registration state of devices in this enrollmentGroup.
     *
     * @param id Enrollment group ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DeviceRegistrationState>> queryDeviceRegistrationStatesAsync(String id, final ServiceCallback<List<DeviceRegistrationState>> serviceCallback) {
        return ServiceFuture.fromResponse(queryDeviceRegistrationStatesWithServiceResponseAsync(id), serviceCallback);
    }

    /**
     * Gets the registration state of devices in this enrollmentGroup.
     *
     * @param id Enrollment group ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;DeviceRegistrationState&gt; object
     */
    public Observable<List<DeviceRegistrationState>> queryDeviceRegistrationStatesAsync(String id) {
        return queryDeviceRegistrationStatesWithServiceResponseAsync(id).map(new Func1<ServiceResponse<List<DeviceRegistrationState>>, List<DeviceRegistrationState>>() {
            @Override
            public List<DeviceRegistrationState> call(ServiceResponse<List<DeviceRegistrationState>> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the registration state of devices in this enrollmentGroup.
     *
     * @param id Enrollment group ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;DeviceRegistrationState&gt; object
     */
    public Observable<ServiceResponse<List<DeviceRegistrationState>>> queryDeviceRegistrationStatesWithServiceResponseAsync(String id) {
        if (id == null) {
            throw new IllegalArgumentException("Parameter id is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        return service.queryDeviceRegistrationStates(id, this.apiVersion())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<DeviceRegistrationState>>>>() {
                @Override
                public Observable<ServiceResponse<List<DeviceRegistrationState>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<DeviceRegistrationState>> clientResponse = queryDeviceRegistrationStatesDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<DeviceRegistrationState>> queryDeviceRegistrationStatesDelegate(Response<ResponseBody> response) throws ProvisioningServiceErrorDetailsException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<List<DeviceRegistrationState>, ProvisioningServiceErrorDetailsException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<List<DeviceRegistrationState>>() { }.getType())
                .registerError(ProvisioningServiceErrorDetailsException.class)
                .build(response);
    }

}
